#!/usr/bin/newlisp
# vim:ft=newlisp

;;; TODO: -r number of repetitions, so you can have multiple alerts staggered, like a snooze function

(constant 'SIGINT 2)
(define (ctrlC-handler) (begin (println "Aborting… ") (exit)))
(signal SIGINT 'ctrlC-handler)

;; version: 0.1
;;;;; properly initialize values
(set 'seconds 0)
(set 'minutes 0)
(set 'text "")
(set 'myNoMusic 0)
(set 'quiet? nil)

;;;;; getopt
(module "getopts.lsp")

(setq version-string "eieruhr Version: 0.1 (December 2013)")

(shortopt "?" (getopts:usage) nil "Print this help message")
(shortopt "h" (getopts:usage) nil "Print this help message")
(longopt "help" (getopts:usage) nil "Print this help message")
(longopt "quiet" (++ myQuiet) nil "Quiet")
(shortopt "q" (++ myQuiet) nil "Quiet")
(shortopt "n" (++ myNoMusic) nil "Disables starting the music for notification.")
(longopt "nomusic" (++ myNoMusic) nil "Disables starting the music for notification.")

(shortopt "s"      (setq seconds getopts:arg) "number" "How many seconds to add to waiting period")
(longopt "seconds" (setq seconds getopts:arg) "number" "How many seconds to add to waiting period")

(shortopt "m"      (setq minutes getopts:arg) "number" "How many minutes to add to waiting period")
(longopt "minutes" (setq minutes getopts:arg) "number" "How many minutes to add to waiting period")

(shortopt "t"   (setq text getopts:arg) "text" "Set the notification text")
(longopt "text" (setq text getopts:arg) "text" "Set the notification text")

;;; do eet
(getopts (2 (main-args)))

;;; do arg testing, aka assert-float and suchlike
(define (assert-float! symbol x)
  (if (number? x)
    (set symbol (float x))
    (let (x (float (replace {[^0-9.]} x "" 0)))
      (if (not (number? x))
        (begin (println "Wrong argument to --" symbol "! Expected a number…")(exit 1)))
        (set symbol x)
    )
  )
)
(assert-float! 'seconds seconds)
(assert-float! 'minutes minutes)

(if (= text "") (set 'text "Time's up¡"))

;;;;; functions

;;; Make a pretty date based on DE locale
(define (pretty-now) (date (date-value) 0 "%d.%m.%Y %H:%M:%S"))

;;; notification via a notification daemon and notify-send
(define (notify-me s) (begin (exec (string {notify-send -u critical } {"} "Eieruhr » " s {"}))))

;;; only print output if not -q/--quiet, first two arguments are required,
;;; everything else get's appended to the string
(define (puts flag text) (if (not flag)(println text (join (args) ""))))

;;; get total seconds, adding the seconds, minutes together, *1000 for (sleep duration)
(set 'totalseconds (mul (add seconds (mul minutes 60)) 1000))

;;; go go go
(begin
  (puts quiet? "»" (pretty-now) "\tStarting" )
  (puts quiet? (format "› Sleeping for %d seconds…" (div totalseconds 1000)))
  (sleep totalseconds)
  (puts quiet? "»" (pretty-now) "\tFinished")

  (if (= 0 myNoMusic) (exec "amixer set Speaker unmute && mpc play"))
  ;(if (= 0 myNoMusic) (exec "amixer set Speaker unmute && cmus-remote -u"))
  (notify-me text)
)

(exit)
